from math import ceil
from aiogram.types import KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButtonRequestUser, KeyboardButtonPollType, KeyboardButtonRequestChat
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from aiogram.filters.callback_data import CallbackData
from sqlalchemy.ext.asyncio import AsyncSession  # –ò–º–ø–æ—Ä—Ç AsyncSession –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
from sqlalchemy import select
from models import Birthdays
from sqlalchemy.ext.asyncio import async_sessionmaker

from tasks import Session


start = ReplyKeyboardMarkup(keyboard=[
    [
        KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏–µ"), KeyboardButton(text="–ü–æ–∫–∞–∑–∞—Ç—å –¥–Ω–∏ —Ä–∞–∂–¥–µ–Ω–∏—è")
        ]
    ], resize_keyboard=True, one_time_keyboard=True)

async def get_username_id():
    builder = ReplyKeyboardBuilder()
    builder.row(KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å id –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–∞", request_user=KeyboardButtonRequestUser(request_id=1)), KeyboardButton(text='–û—Ç–º–µ–Ω–∞'))
    return builder.as_markup(resize_keyboard=True)


async def select_allusers(session: AsyncSession, user_id):
    query = select(Birthdays).where(Birthdays.user_id == user_id)  # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ –≤–∞—à–∞ –º–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è "User"
    result = await session.execute(query)  # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    users = result.scalars().all()  # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    return users  # –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π


async def set_notif_date():
    builder = InlineKeyboardBuilder()
    builder.button(text="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—É", callback_data="set_date")
    builder.button(text="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", callback_data="set_notif")
    builder.button(text="–û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")
    builder.adjust(1)
    return builder.as_markup()


class Pagination(CallbackData, prefix="pag"):
    action: str  # –î–µ–π—Å—Ç–≤–∏–µ
    page: int  # –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∏ –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø–µ—Ä–µ–ª–∏—Å—Ç—ã–≤–∞–Ω–∏—è
async def paginator(session: AsyncSession, page: int = 0, limit: int = 5, user_id=0):
    users = await select_allusers(session=session, user_id=user_id)  # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    builder = InlineKeyboardBuilder()  # –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ InlineKeyboardBuilder
    start_offset = page * limit  # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–º–µ—â–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    end_offset = start_offset + limit  # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∫–æ–Ω–µ—á–Ω–æ–≥–æ —Å–º–µ—â–µ–Ω–∏—è

    for user in users[start_offset:end_offset]:  # –ü–µ—Ä–µ–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        builder.row(InlineKeyboardButton(text=f'üë§ {user.full_name}', callback_data=BirthdayCallback(action='get', id=user.birthday_boy_id).pack()))  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    buttons_row = []  # –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–Ω–æ–ø–æ–∫
    if page > 0:  # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –ø–µ—Ä–≤–∞—è
        buttons_row.append(InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=Pagination(action="prev", page=page - 1).pack()))  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–Ω–∞–∑–∞–¥"
    if end_offset < len(users):  # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –µ—â—ë –µ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        buttons_row.append(InlineKeyboardButton(text="‚û°Ô∏è", callback_data=Pagination(action="next", page=page + 1).pack()))  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–≤–ø–µ—Ä–µ–¥"
    elif limit < len(users):  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å
        buttons_row.append(InlineKeyboardButton(text="‚û°Ô∏è", callback_data=Pagination(action="next", page=0).pack()))  # –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –Ω–∞ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    builder.row(*buttons_row)  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    builder.row(InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='cancel'))  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–Ω–∞–∑–∞–¥"
    return builder.as_markup()  # –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤ –≤–∏–¥–µ —Ä–∞–∑–º–µ—Ç–∫–∏


class Edit(CallbackData, prefix='edit'):
    action: str
    user_id: int


async def edit(user_id):
    button = InlineKeyboardBuilder()
    button.add(InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è', callback_data=Edit(action='edit_name', user_id=user_id).pack()))
    button.row(InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è', callback_data=Edit(action='edit_birth', user_id=user_id).pack()), 
               InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data=Edit(action='edit_notif', user_id=user_id).pack()))
    button.row(InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å', callback_data=Edit(action='delete', user_id=user_id).pack()))
    return button.as_markup()



async def universal_keyboard(buttons: dict=None):
    '''
    request_users
    request_chat
    request_contact
    request_location
    request_poll
    '''
    if buttons is None:
        return 0
    
    builder = ReplyKeyboardBuilder()

    for button, property in buttons.items():
        match property:
            case 'request_users':
                builder.button(text=button, request_user=KeyboardButtonRequestUser(request_id=1))
            case 'request_chat':
                builder.button(text=button, request_chat=KeyboardButtonRequestChat(request_id=1))

            case 'request_contact':
                builder.button(text=button, request_contact=True)

            case 'request_location':
                builder.button(text=button, request_location=True)

            case 'request_poll':
                builder.button(text=button, request_poll=KeyboardButtonPollType(type='regular'))


class BirthdayCallback(CallbackData, prefix='birthday'):
    action: str
    id: int
